#!/bin/bash

# Edit the following values according to your case
user='teryakiisauce' # Your username (for home dir below)
home_dir=/home/$user
repo_dir=$home_dir/Documents/GitHub/My-Arch-Dotfiles # The path of "My-Arch-Dotfiles" repo
cpu='intel' # Enter either 'intel' or 'amd' (all lowercase)

# Display important alert
echo "Before you run the script make sure to stop & read it if you haven't and edit the variables as desired... Will start within 15 seconds."
sleep 15

# INFO: Script needs sudo privileges to run properly
if [[ "$EUID" -ne 0 ]]; then
	echo "You need 'sudo' privileges to continue running the script."
	exit
fi
echo ""

# Create group and add user to the group
groupadd $user
usermod -a -G $user $user

# Intel or AMD CPU
ucode=''
# Deleting both just in case bc only one should exist at a time
rm -vr /boot/amd-ucode*
rm -vr /boot/intel-ucode*

echo ""
echo "CPU: [" $cpu "] - Press 'ctrl+c' if incorrect. Fix the script's variables & then rerun. Waiting for 10 seconds..."
sleep 10
echo ""

if [[ $cpu == 'intel' ]]; then
	ucode='intel-ucode'
elif [[ $cpu == 'amd' ]]; then
	ucode='amd-ucode'
else
	echo "Please read & adjust the script's variables at the top to make sure the script runs successfully..."
	exit
fi

echo ""

# Installs required software [installs ONLY Intel/ AMD Open-Source GPU drivers; Proprietary AMD/ NVIDIA GPU drivers NOT installed]
pacman -Syu --noconfirm && pacman -S --noconfirm base base-devel linux linux-headers dialog efibootmgr os-prober $ucode go git gitui net-tools neovim man-db vim nano ntfs-3g numlockx htop openssh gparted firefox neofetch alacritty bspwm nitrogen polybar ranger pavucontrol discord papirus-icon-theme reflector rofi rofimoji starship sxhkd trash-cli zsh zsh-syntax-highlighting xorg-server mesa noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ttf-nerd-fonts-symbols-2048-em networkmanager dhcpcd iwd wpa_supplicant wireless_tools netctl # pipewire pipewire-pulse virtualbox-guest-utils xf86-video-vmware gnome xfce4 xfce4-goodies lightdm lightdm-gtk-greeter

# Uncomment the extra packages above if needed
# *Note: for virtual-guest-utils: run this command once installed: 'systemctl enable vboxservice'

echo ""
echo "=== [ Installations finished ] ==="

# Creating the necessary symbolic links
echo ""
echo "[INFO]: Proceeding to create symbolic links..."
sleep 2
echo ""

# 1. Home Dir links
homeDirContents=(".zshrc" ".bashrc" ".xinitrc")
for content in ${homeDirContents[@]}; do
	rm -rv $home_dir/$content*
	ln -sfv $repo_dir/home/$content $home_dir/$content
	chown -R $user:$user $home_dir/$content
done

# 2. Pictures Dir links
runuser -u $user -- mkdir $home_dir/Pictures # create the directory just in case
picsDirContents=("Anime_Wallpapers" "ASCII_art" "Unused")
for content in ${picsDirContents[@]}; do
	trash-put -fv $home_dir/Pictures/$content*
	ln -sfv $repo_dir/home/Pictures/$content $home_dir/Pictures/$content
	chown -R $user:$user $home_dir/Pictures/$content
done

# 3. Documents Dir links
runuser -u $user -- mkdir $home_dir/Documents # create the directory just in case
docsDirContents=("Scripts")
for content in ${docsDirContents[@]}; do
	trash-put -fv $home_dir/Documents/$content*
	ln -sfv $repo_dir/home/Documents/$content $home_dir/Documents/$content
	chown -R $user:$user $home_dir/Documents/$content
done

# 4. .local Dir links
runuser -u $user -- mkdir -p $home_dir/.local/share # create the directory just in case
loc_shareDirContents=("rofimoji")
for content in ${loc_shareDirContents[@]}; do
	rm -rv $home_dir/.local/share/$content*
	ln -sfv $repo_dir/home/.local/share/$content $home_dir/.local/share/$content
	chown -R $user:$user $home_dir/.local/share/$content
done

# 5. .config Dir links
runuser -u $user -- mkdir -p $home_dir/.config # create the directory just in case
configDirContents=("alacritty" "bspwm" "fontconfig" "htop" "neofetch" "nitrogen" "openrazer" "picom" "polybar" "polychromatic" "ranger" "rofi" "sxhkd" "betterlockscreenrc" "currentwm" "starship.toml")
for content in ${configDirContents[@]}; do
	rm -rv $home_dir/.config/$content*
	ln -sfv $repo_dir/home/.config/$content $home_dir/.config/$content
	chown -R $user:$user $home_dir/.config/$content
done

echo ""
echo "[INFO]: Symbolic links created!"
echo ""

# Install yay if not found
if [[ $(which yay) != '/usr/bin/yay' ]]; then
	echo "[WARNING]: Yay is not installed, script will now proceed to install yay..."
	echo ""
	sleep 5
	mkdir -v /yay-install/ # create temp dir to download yay
	git clone https://aur.archlinux.org/yay-git.git /yay-install/
	chown -R $user:$user /yay-install/
	cd /yay-install/
	runuser -u $user -- makepkg -si --noconfirm
	rm -rv /yay-install/
	echo ""
fi

echo "[GOOD]: Yay AUR helper is found!"
echo ""
echo "Please proceed to install 'betterlockscreen' & 'picom-jonaburg-git'"
sleep 2
runuser -u $user -- yay -Syu --noconfirm
runuser -u $user -- yay -S --noconfirm betterlockscreen picom-jonaburg-git

# Setting up final configurations
usr_binDirContents=("flipwm" "postinstall_arch" "flipui")
for content in ${usr_binDirContents[@]}; do
	rm -rv /bin/$content*
	ln -sfv $repo_dir/home/Documents/Scripts/$content /bin/$content
	# chown -R $user:$user /bin/$content
done

fontsDirContents=("DOWNLOADED")
for content in ${fontsDirContents[@]}; do
	rm -rv /usr/share/fonts/$content*
	ln -sfv $repo_dir/other/usr/share/fonts.downloaded/$content /usr/share/fonts/$content
	#chown -R $user:$user /usr/share/$content
done

fc-cache -rfv

echo ""
echo "[INFO]: Almost done...!"
echo ""

usermod -s /bin/zsh $user
echo ""
runuser -u $user -- betterlockscreen -u $home_dir/Pictures/Anime_Wallpapers/ez4gdfx5fmo81.png
echo ""
cp -v /etc/pacman.d/mirrorlist /etc/pacman.d/backup.mirrorlist && rm -rv /etc/pacman.d/mirrorlist* && ln -sfv $repo_dir/other/etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist
echo ""
systemctl enable --now sshd # Enables SSH remote connections
echo ""
flipui -d gui # Runs my custom script to make GUI mode run by default
echo ""

# Uncomment the stuff below if needed
#
#systemctl disable lightdm
#echo ""
#systemctl disable gdm
#echo ""
systemctl enable --now NetworkManager
echo ""

echo "[NOTE]: Some files might have been moved to trash instead of being permenantly deleted. Use [sudo trash-list] to show the files or [sudo trash-restore] to recover the files."

echo ""
echo "[Success]: Done, have a nice day <3 ^_^"
echo ""

